<job>
<reference object="WinSCP.Session" />
<script language="JScript">

//
// DailyBuildUpload.wsf
//
// Copyright (c) Shareaza Development Team, 2014.
// This file is part of SHAREAZA (shareaza.sourceforge.net)
//
// Shareaza is free software; you can redistribute it
// and/or modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.
//
// Shareaza is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Shareaza; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//

// This script synchronizes local and remote directories of Shareaza snapshots and builds its index.

// Requirements:
//	Installed "WinSCP 5.x" and "WinSCP 5.x .NET assembly/COM library" - http://winscp.net/eng/download.php

var local_snapshots = "C:\\Projects\\Shareaza\\Snapshots\\";
var remote_snapshots = "/home/pfs/project/s/sh/shareaza/Shareaza/Snapshots/";
var max_snapshots = 10;
var remote_index = "/home/project-web/s/sh/shareaza/htdocs/builds";
var host = "web.sourceforge.net";
var user = "";
var password = "";
var sshHostKeyFingerprint = "ssh-rsa 2048 xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx";

try
{
	var data = new Array();	// array of revisions, revision: [0] = name, [1] = revision, [2] = date, [3] = need upload.
	var fso = WScript.CreateObject( "Scripting.FileSystemObject" );

	function compareReverse(first, second)
	{
	   if ( first[ 1 ] == second[ 1 ] )
		  return 0;
	   if ( first[ 1 ] > second[ 1 ] )
		  return -1;
	   else
		  return 1; 
	}
	
	function searchOf(first, second)
	{
		for ( var i = 0; i < first.length; ++i )
		{
			if ( first[ i ][ 1 ] == second )
				return i;
		}
		return -1;
	}

	// Listing local
	for ( var folders = new Enumerator( fso.GetFolder( local_snapshots ).SubFolders ); ! folders.atEnd(); folders.moveNext() )
	{
		var folder = folders.item();
		if ( folder.Name.substr( 0, 1 ) == "r" )
		{
			WScript.Echo( "Listing local " + local_snapshots + folder.Name + "..." );
			for ( var files = new Enumerator( fso.GetFolder( local_snapshots + folder.Name ).Files ); ! files.atEnd(); files.moveNext() )
			{
				var file = files.item();
				var n = file.Name.search( folder.Name );
				if ( n > 0 && file.Name.substr( file.Name.length - 4 ) == ".exe" )
				{
					var date = file.Name.substr( n + folder.Name.length + 1, 10 );
					WScript.Echo( "\tFound: " + file.Name + ", " + folder.Name + ", " + date );
					if ( searchOf( data, folder.Name ) == -1 )
					{
						data.push( new Array( file.Name, folder.Name, date, true ) );
					}
					else
					{
						WScript.Echo( "Error: Duplicate revision " + folder.Name );
						WScript.Quit( 2 );
					}
				}	
			}
		}
	}

    // Setup session options
    var sessionOptions = WScript.CreateObject( "WinSCP.SessionOptions" );
	sessionOptions.Protocol = Protocol_Sftp;
    sessionOptions.HostName = host;
    sessionOptions.UserName = user;
    sessionOptions.Password = password;
    sessionOptions.SshHostKeyFingerprint = sshHostKeyFingerprint;
    var session = WScript.CreateObject( "WinSCP.Session" );
    try
    {
        // Connect
		WScript.Echo( "Connecting to " + host + "..." );
        session.Open( sessionOptions );

		// Listing remote
        for ( var enum_snapshots = new Enumerator( session.ListDirectory( remote_snapshots ).Files ); ! enum_snapshots.atEnd(); enum_snapshots.moveNext() )
		{
			var folder = enum_snapshots.item();
			if ( folder.IsDirectory && folder.Name.substr( 0, 1 ) == "r" )
			{
				WScript.Echo( "Listing remote " + remote_snapshots + folder.Name + "..." );
				for (var files = new Enumerator( session.ListDirectory( remote_snapshots + folder.Name ).Files ); ! files.atEnd(); files.moveNext())
				{
					var file = files.item();
					var n = file.Name.search( folder.Name );
					if ( ! file.IsDirectory && n > 0 && file.Name.substr( file.Name.length - 4 ) == ".exe" )
					{
						var date = file.Name.substr( n + folder.Name.length + 1, 10 );
						WScript.Echo( "\tFound: " + file.Name + ", " + folder.Name + ", " + date );
						var index = searchOf( data, folder.Name );
						if ( index == -1 )
						{
							data.push( new Array( file.Name, folder.Name, date, false ) );
						}
						else if ( data[ index ][ 3 ] )
						{
							// Already uploaded
							data[ index ][ 3 ] = false;
						}
						else
						{
							WScript.Echo( "Error: Duplicate revision " + folder.Name );
							WScript.Quit( 2 );
						}
					}
				}
			}
        }

		data.sort( compareReverse );
		
		// Remove extra revisions
		while ( data.length > max_snapshots )
		{
			var extra = data.pop();
			WScript.Echo( "Removing extra revision " + extra[ 1 ] + "..." );
			if ( ! extra[ 3 ] )
			{
				WScript.Echo( "\tRemoving remote revision..." );
				var removeResult = session.RemoveFiles( remote_snapshots + extra[ 1 ] );
				removeResult.Check();
			}
		}
		
		// Uploading missing revisions
		for ( var i = 0; i < data.length; ++i )
		{
			var revision = data[ i ];
			if ( revision[ 3 ] )
			{
				WScript.Echo( "Uploading revision " + revision[ 1 ] + "..." );
				var transferResult = session.PutFiles( local_snapshots + revision[ 1 ] + "\\", remote_snapshots, false );
				transferResult.Check();
				for ( var enumerator = new Enumerator(transferResult.Transfers); !enumerator.atEnd(); enumerator.moveNext() )
				{
					WScript.Echo( "Upload of " + enumerator.item().FileName + " succeeded." );
				}
			}
		}

		// Create index file for upload
		var tmp = fso.GetSpecialFolder( 2 ) + "\\" + fso.GetTempName();
		WScript.Echo( "Writing file " + tmp + "..." );
		var tsr = fso.OpenTextFile( tmp, 2, true );
		try
		{
			for ( var item = data.pop(); item != undefined; item = data.pop() )
			{
				tsr.WriteLine( item[0] + "|" + item[1] + "|" + item[2] + "||||" );
			}
		}
		finally
		{
			tsr.Close();
		}
		
		// Upload index file
		WScript.Echo( "Uploading to " + remote_index + "..." );
        var transferResult = session.PutFiles( tmp, remote_index, false );
        transferResult.Check();
        for ( var enumerator = new Enumerator(transferResult.Transfers); !enumerator.atEnd(); enumerator.moveNext() )
        {
            WScript.Echo( "Upload of " + enumerator.item().FileName + " succeeded." );
        }

		// Clean-up
		fso.DeleteFile( tmp );
	}
    finally
    {
        // Disconnect, clean up
        session.Dispose();
    }
}
catch (e)
{
    WScript.Echo( e.name + ": " + e.message );
    WScript.Quit( 1 );
}
WScript.Quit( 0 );

</script>
</job>
